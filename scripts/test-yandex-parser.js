/**
 * Test Yandex XML Parser
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö XML —Å—Ç—Ä—É–∫—Ç—É—Ä
 * 
 * Run: node scripts/test-yandex-parser.js
 */

const { XMLParser } = require('fast-xml-parser');

// –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ parse-yandex-feed.js
function toNumber(val) {
  if (val == null) return null;
  if (typeof val === 'number') return val;
  const n = parseFloat(String(val).replace(/[^0-9.\-]/g, ''));
  return Number.isFinite(n) ? n : null;
}

function typeMap(rawCategory, rawPropType) {
  const s = [rawCategory, rawPropType].filter(Boolean).map(x => String(x).toLowerCase()).join(' ');
  if (/–∫–≤–∞—Ä—Ç–∏—Ä|apartment/.test(s)) return 'apartment';
  if (/–¥–æ–º|house|–∫–æ—Ç—Ç–µ–¥–∂/.test(s)) return 'house';
  if (/–æ—Ñ–∏—Å|office/.test(s)) return 'office';
  if (/–∫–æ–º–º–µ—Ä|free purpose|–º–∞–≥–∞–∑–∏–Ω|—Ç–æ—Ä–≥–æ–≤/.test(s)) return 'commercial';
  if (/–∑–µ–º–ª|—É—á–∞—Å—Ç–æ–∫|land/.test(s)) return 'land';
  if (/—Å–∫–ª–∞–¥|warehouse|–ø—Ä–æ–∏–∑–≤–æ–¥/.test(s)) return 'warehouse';
  return null;
}

function dealMap(rawType, maybeTextBlob) {
  const s = [rawType, maybeTextBlob].filter(Boolean).map(x => String(x).toLowerCase()).join(' ');
  if (/–ø—Ä–æ–¥–∞–∂–∞|sale/.test(s)) return 'sale';
  if (/–∞—Ä–µ–Ω–¥–∞|rent/.test(s)) return 'rent';
  if (/–ø–æ–¥–æ–±–æ–≤|–ø–æ—Å—É—Ç–æ—á|daily/.test(s)) return 'daily';
  return null;
}

function getArray(x) { return Array.isArray(x) ? x : (x ? [x] : []); }

function parseOffers(xmlText) {
  const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '' });
  const parsed = parser.parse(xmlText);
  let offers = parsed?.['realty-feed']?.offer || parsed?.offer;
  if (!offers) {
    const queue = [parsed];
    while (queue.length) {
      const cur = queue.shift();
      if (Array.isArray(cur) && cur.length && typeof cur[0] === 'object') { offers = cur; break; }
      if (cur && typeof cur === 'object') for (const k of Object.keys(cur)) queue.push(cur[k]);
    }
  }
  return Array.isArray(offers) ? offers : [offers];
}

function normalizeOffer(off) {
  const internalId = off?.['internal-id'] != null ? String(off['internal-id']) : null;
  const url = off?.url || null;
  const category = off?.category || null;
  const propType = off?.['property-type'] || null;
  const rawType = off?.type || null;
  const textBlob = [category, propType, rawType, off?.name].filter(Boolean).join(' ');
  const t = typeMap(category, propType);
  const deal = dealMap(rawType, textBlob);

  return {
    id: internalId,
    url: url,
    category: category,
    propertyType: propType,
    type: t,
    rawType: rawType,
    transactionType: deal,
    parsed: { category, propType, rawType, typeResult: t, dealResult: deal }
  };
}

// === TEST CASES ===

const testCases = [
  {
    name: '–¢–µ—Å—Ç 1: –ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ)',
    xml: `<?xml version="1.0"?>
<realty-feed>
  <offer internal-id="111861165">
    <type>–∞—Ä–µ–Ω–¥–∞</type>
    <property-type>–∂–∏–ª–∞—è</property-type>
    <category>–∫–≤–∞—Ä—Ç–∏—Ä–∞</category>
  </offer>
</realty-feed>`
  },
  {
    name: '–¢–µ—Å—Ç 2: –ü—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∑ URL –∏ –¥–∞—Ç–∞–º–∏)',
    xml: `<?xml version="1.0"?>
<realty-feed>
  <offer internal-id="213054095">
    <type>–ø—Ä–æ–¥–∞–∂–∞</type>
    <property-type>–∂–∏–ª–∞—è</property-type>
    <category>–∫–≤–∞—Ä—Ç–∏—Ä–∞</category>
    <url>http://estatyq.ligapro.ua/kvartiry_prodaga/ann-3054095-0.html</url>
    <creation-date>2025-01-14T00:00:00+02:00</creation-date>
    <last-update-date>2025-01-14T10:18:36+02:00</last-update-date>
  </offer>
</realty-feed>`
  },
  {
    name: '–¢–µ—Å—Ç 3: –ü–æ–¥–æ–±–æ–≤–æ –æ—Ä–µ–Ω–¥–∞ –±—É–¥–∏–Ω–∫—É',
    xml: `<?xml version="1.0"?>
<realty-feed>
  <offer internal-id="312054096">
    <type>–ø–æ–¥–æ–±–æ–≤–æ</type>
    <property-type>–∂–∏–ª–∞—è</property-type>
    <category>–¥–æ–º</category>
    <url>http://estatyq.ligapro.ua/domy_podobobovo/ann-2054096-0.html</url>
  </offer>
</realty-feed>`
  },
  {
    name: '–¢–µ—Å—Ç 4: –ö–æ–º–º–µ—Ä—Ü—ñ–π–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å',
    xml: `<?xml version="1.0"?>
<realty-feed>
  <offer internal-id="412054097">
    <type>–ø—Ä–æ–¥–∞–∂–∞</type>
    <property-type>–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è</property-type>
    <category>–æ—Ñ–∏—Å</category>
    <url>http://estatyq.ligapro.ua/komm/ann-2054097-0.html</url>
  </offer>
</realty-feed>`
  }
];

// === MAIN TEST ===

console.log('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ø–ù–î–ï–ö–° –ü–ê–†–°–ï–†–ê\n');
console.log('='.repeat(80));

let passed = 0;
let failed = 0;

for (const testCase of testCases) {
  console.log(`\n‚úÖ ${testCase.name}`);
  console.log('-'.repeat(80));

  try {
    const offers = parseOffers(testCase.xml);
    console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: ${offers.length}`);

    for (const offer of offers) {
      const normalized = normalizeOffer(offer);
      
      console.log(`\n  ID: ${normalized.id}`);
      console.log(`  URL: ${normalized.url || '(–Ω–µ –≤–∫–∞–∑–∞–Ω–æ)'}`);
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${normalized.category}`);
      console.log(`  –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: ${normalized.propertyType}`);
      console.log(`  Raw type: ${normalized.rawType}`);
      
      console.log(`\n  üîç –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–ê–†–°–ò–ù–ì–£:`);
      console.log(`     typeMap("${normalized.category}", "${normalized.propertyType}") ‚Üí "${normalized.type}"`);
      console.log(`     dealMap("${normalized.rawType}", ...) ‚Üí "${normalized.transactionType}"`);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ
      let testPassed = true;
      
      if (normalized.type === null && normalized.category !== null) {
        console.log(`     ‚ö†Ô∏è  –ü–û–ú–ò–õ–ö–ê: type=null, –º–æ–∂–ª–∏–≤–æ –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è`);
        testPassed = false;
      }
      
      if (normalized.transactionType === null && normalized.rawType !== null) {
        console.log(`     ‚ö†Ô∏è  –ü–û–ú–ò–õ–ö–ê: transactionType=null, –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —É–≥–æ–¥–∏`);
        testPassed = false;
      }

      if (testPassed) {
        console.log(`     ‚úÖ –£–°–ü–Ü–®–ù–û: –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–π—à–æ–≤ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫`);
        passed++;
      } else {
        failed++;
      }
    }
  } catch (err) {
    console.log(`‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: ${err.message}`);
    failed++;
  }
}

console.log(`\n${'='.repeat(80)}`);
console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:`);
console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: ${passed}`);
console.log(`   ‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö: ${failed}`);
console.log(`   üìà –í—Å—å–æ–≥–æ: ${passed + failed}`);

if (failed === 0) {
  console.log(`\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü!`);
  process.exit(0);
} else {
  console.log(`\n‚ö†Ô∏è  –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–Ø`);
  process.exit(1);
}
